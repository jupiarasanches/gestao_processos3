#!/usr/bin/env node

/**
 * Script para migrar da autentica√ß√£o mock para Supabase real
 * Executa as seguintes a√ß√µes:
 * 1. Atualiza imports nos componentes
 * 2. Atualiza o layout para usar AuthProvider real
 * 3. Reinicia o servidor de desenvolvimento
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ Iniciando migra√ß√£o para Supabase...\n');

// Lista de arquivos para atualizar
const filesToUpdate = [
  {
    file: 'app/layout.tsx',
    search: 'import { MockAuthProvider }',
    replace: 'import { AuthProvider }',
    description: 'Layout principal'
  },
  {
    file: 'app/layout.tsx',
    search: 'from "@/components/mock-auth-provider"',
    replace: 'from "@/components/auth-provider"',
    description: 'Import do AuthProvider'
  },
  {
    file: 'app/layout.tsx',
    search: '<MockAuthProvider>',
    replace: '<AuthProvider>',
    description: 'Componente AuthProvider'
  },
  {
    file: 'app/layout.tsx',
    search: '</MockAuthProvider>',
    replace: '</AuthProvider>',
    description: 'Fechamento AuthProvider'
  },
  {
    file: 'app/login/page.tsx',
    search: 'from "@/components/mock-auth-provider"',
    replace: 'from "@/components/auth-provider"',
    description: 'Login - Import AuthProvider'
  },
  {
    file: 'app/dashboard/page.tsx',
    search: 'from "@/components/mock-auth-provider"',
    replace: 'from "@/components/auth-provider"',
    description: 'Dashboard - Import AuthProvider'
  },
  {
    file: 'components/app-sidebar.tsx',
    search: 'from "@/components/mock-auth-provider"',
    replace: 'from "@/components/auth-provider"',
    description: 'Sidebar - Import AuthProvider'
  },
  {
    file: 'components/protected-route.tsx',
    search: 'from "@/components/mock-auth-provider"',
    replace: 'from "@/components/auth-provider"',
    description: 'ProtectedRoute - Import AuthProvider'
  }
];

let updatedFiles = 0;
let errors = 0;

// Fun√ß√£o para atualizar um arquivo
function updateFile(fileInfo) {
  const filePath = path.join(process.cwd(), fileInfo.file);
  
  try {
    if (!fs.existsSync(filePath)) {
      console.log(`‚ö†Ô∏è  Arquivo n√£o encontrado: ${fileInfo.file}`);
      return;
    }

    let content = fs.readFileSync(filePath, 'utf8');
    
    if (content.includes(fileInfo.search)) {
      content = content.replace(new RegExp(fileInfo.search, 'g'), fileInfo.replace);
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ ${fileInfo.description} - ${fileInfo.file}`);
      updatedFiles++;
    } else {
      console.log(`‚ÑπÔ∏è  J√° atualizado: ${fileInfo.file}`);
    }
  } catch (error) {
    console.error(`‚ùå Erro ao atualizar ${fileInfo.file}:`, error.message);
    errors++;
  }
}

// Verificar se as vari√°veis de ambiente est√£o configuradas
console.log('üîç Verificando configura√ß√£o...');

const envPath = path.join(process.cwd(), '.env.local');
if (!fs.existsSync(envPath)) {
  console.log('‚ö†Ô∏è  Arquivo .env.local n√£o encontrado!');
  console.log('üìù Crie o arquivo .env.local com suas credenciais do Supabase:');
  console.log('');
  console.log('NEXT_PUBLIC_SUPABASE_URL=https://[seu-id].supabase.co');
  console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJ[sua-chave]');
  console.log('');
  process.exit(1);
}

const envContent = fs.readFileSync(envPath, 'utf8');
if (!envContent.includes('NEXT_PUBLIC_SUPABASE_URL') || !envContent.includes('NEXT_PUBLIC_SUPABASE_ANON_KEY')) {
  console.log('‚ö†Ô∏è  Configura√ß√£o incompleta no .env.local!');
  console.log('üìù Verifique se as seguintes vari√°veis est√£o definidas:');
  console.log('- NEXT_PUBLIC_SUPABASE_URL');
  console.log('- NEXT_PUBLIC_SUPABASE_ANON_KEY');
  console.log('');
  process.exit(1);
}

console.log('‚úÖ Configura√ß√£o encontrada!');
console.log('');

// Executar atualiza√ß√µes
console.log('üìù Atualizando arquivos...');
filesToUpdate.forEach(updateFile);

console.log('');
console.log('üìä Resumo da migra√ß√£o:');
console.log(`‚úÖ Arquivos atualizados: ${updatedFiles}`);
console.log(`‚ùå Erros: ${errors}`);

if (errors === 0) {
  console.log('');
  console.log('üéâ Migra√ß√£o conclu√≠da com sucesso!');
  console.log('');
  console.log('üìã Pr√≥ximos passos:');
  console.log('1. Execute os scripts SQL no Supabase (ver scripts/supabase-setup.md)');
  console.log('2. Reinicie o servidor: npm run dev');
  console.log('3. Teste o login com: admin@ecoflow.com / 123456');
  console.log('');
} else {
  console.log('');
  console.log('‚ö†Ô∏è  Migra√ß√£o conclu√≠da com erros. Verifique os problemas acima.');
  console.log('');
  process.exit(1);
}